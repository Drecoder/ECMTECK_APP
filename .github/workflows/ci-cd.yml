name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

build_and_test:
  runs-on: ubuntu-latest
# We use 'services' to spin up the required databases for integration tests.
# This mirrors your docker-compose file.
services:
  postgres:
    image: postgres:15
    env:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: appdb
    ports:
      - 5432:5432
    options: >-
      --health-cmd pg_isready
      --health-interval 10s
      --health-timeout 5s
      --health-retries 5
      
  mongo:
    image: mongo:6
    ports:
      - 27017:27017

steps:
  - name: Checkout Code
    uses: actions/checkout@v4

  # ===============================================
  #  Backend CI Pipeline (Django/FastAPI)
  # ===============================================

  - name: Set up Python
    uses: actions/setup-python@v5
    with:
      python-version: '3.11'

  - name: Install Backend Dependencies
    working-directory: ./backend
    run: |
      python -m pip install --upgrade pip
      pip install -r requirements.txt

  - name: Wait for PostgreSQL and MongoDB to be ready
    run: |
      echo "Waiting for PostgreSQL..."
      sudo apt-get update && sudo apt-get install -y postgresql-client
      until pg_isready --host=localhost --port=5432 --dbname=appdb --username=postgres; do
        echo "PostgreSQL is unavailable - sleeping"
        sleep 1
      done
      echo "PostgreSQL is up and running!"
      
      # MongoDB has no built-in health check, so we wait for the port to be open.
      echo "Waiting for MongoDB..."
      timeout 60 bash -c 'until echo > /dev/tcp/localhost/27017; do sleep 1; done'
      echo "MongoDB is up and running!"

  - name: Run Backend Tests
    working-directory: ./backend
    run: |
      DATABASE_URL=postgresql://postgres:postgres@localhost:5432/appdb
      MONGO_URL=mongodb://localhost:27017/appdb
      python manage.py test

  - name: Build Backend Docker Image
    uses: docker/build-push-action@v5
    with:
      context: ./backend
      file: ./backend/Dockerfile
      push: false # We only push if it's a main branch commit
      tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:latest
      
  # ===============================================
  #  Frontend CI Pipeline (React)
  # ===============================================

  - name: Set up Node.js
    uses: actions/setup-node@v4
    with:
      node-version: '18'

  - name: Install Frontend Dependencies
    working-directory: ./frontend
    run: npm ci

  - name: Run Frontend Tests
    working-directory: ./frontend
    run: npm test -- --passWithNoTests # Adjust based on your test runner

  - name: Build Frontend Docker Image
    uses: docker/build-push-action@v5
    with:
      context: ./frontend
      file: ./frontend/Dockerfile
      push: false
      tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest

  # ===============================================
  #  Push to Docker Registry
  # ===============================================
  
  # The push step is only executed after all tests pass and only on the main branch.
  - name: Login to Docker Hub
    if: github.ref == 'refs/heads/main'
    uses: docker/login-action@v3
    with:
      username: ${{ env.DOCKERHUB_USERNAME }}
      password: ${{ secrets.DOCKERHUB_TOKEN }}

  - name: Push Backend Docker Image
    if: github.ref == 'refs/heads/main'
    uses: docker/build-push-action@v5
    with:
      context: ./backend
      file: ./backend/Dockerfile
      push: true
      tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:latest, ${{ env.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}

  - name: Push Frontend Docker Image
    if: github.ref == 'refs/heads/main'
    uses: docker/build-push-action@v5
    with:
      context: ./frontend
      file: ./frontend/Dockerfile
      push: true
      tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest, ${{ env.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}

deploy:
name: Deploy to Production
runs-on: ubuntu-latest
needs: build_and_test
if: github.ref == 'refs/heads/main'

# This is a conceptual stage. You will need to customize this based on your
# hosting provider (e.g., Kubernetes, AWS ECS, Google Cloud Run).
steps:
  - name: Deploy to Cloud Provider
    run: |
      echo "Deploying the latest images to your production environment."
      echo "Backend Image: ${{ env.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}"
      echo "Frontend Image: ${{ env.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}"
      echo "Add your actual deployment steps here, e.g., using a cloud CLI or a dedicated action."
